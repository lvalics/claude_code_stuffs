#!/bin/bash

# Claude Code Framework Customization Script
# This interactive script helps teams customize the best practices to their needs

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
CLAUDE_DIR=".claude"
BEST_PRACTICES_DIR="$CLAUDE_DIR/best_practices"
CONFIG_DIR="$CLAUDE_DIR/config"
CUSTOMIZATION_LOG="$CLAUDE_DIR/customization-log.md"
TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

# Ensure we're in the right directory
if [ ! -d "$CLAUDE_DIR" ]; then
    echo -e "${RED}Error: Not in a Claude Code project directory${NC}"
    echo "Please run this script from the root of your project"
    exit 1
fi

# Check if we're in an interactive terminal
if [ ! -t 0 ]; then
    echo -e "${RED}Error: This script requires an interactive terminal${NC}"
    echo "stdin is not available. This might happen when running through certain tools."
    echo "Please ensure you're running this in a proper terminal environment."
    exit 1
fi

# Create config directory if it doesn't exist
mkdir -p "$CONFIG_DIR"

echo -e "${BLUE}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║        Claude Code Framework Customization Tool        ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════╝${NC}"
echo

# Function to prompt for yes/no
prompt_yes_no() {
    prompt="$1"
    
    while true; do
        printf "%s (y/n): " "$prompt"
        read response
        case $response in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes (y) or no (n).";;
        esac
    done
}

# Function to prompt for choice
prompt_choice() {
    prompt="$1"
    shift
    
    echo "$prompt"
    i=1
    for option in "$@"; do
        echo "  $i. $option"
        i=$((i+1))
    done
    
    while true; do
        printf "Enter your choice (1-$((i-1))): "
        read choice
        if [ "$choice" -ge 1 ] 2>/dev/null && [ "$choice" -le $((i-1)) ] 2>/dev/null; then
            j=1
            for option in "$@"; do
                if [ "$j" = "$choice" ]; then
                    echo "$option"
                    return 0
                fi
                j=$((j+1))
            done
        else
            echo "Invalid choice. Please enter a number between 1 and $((i-1))."
        fi
    done
}

# Gather team information
echo -e "${YELLOW}Let's start by gathering some information about your team:${NC}"
echo

printf "Enter your team/project name: "
read TEAM_NAME
while [ -z "$TEAM_NAME" ]; do
    echo -e "${RED}Team name cannot be empty${NC}"
    printf "Enter your team/project name: "
    read TEAM_NAME
done

TEAM_SIZE=$(prompt_choice "What is your team size?" "Solo developer" "Small team (2-5)" "Medium team (6-15)" "Large team (16+)")

PROJECT_TYPE=$(prompt_choice "What type of project are you working on?" "Web application" "API/Microservices" "Mobile app" "Desktop application" "Library/Package" "Full-stack application")

INDUSTRY=$(prompt_choice "What industry/domain?" "General/Other" "Finance/FinTech" "Healthcare" "E-commerce" "Education" "Gaming" "Enterprise")

# Create team configuration
echo -e "\n${YELLOW}Creating team configuration...${NC}"

cat > "$CONFIG_DIR/team-config.yaml" << EOF
# Team Configuration
# Generated by customization script on $TIMESTAMP

team:
  name: "$TEAM_NAME"
  size: "$TEAM_SIZE"
  
project:
  type: "$PROJECT_TYPE"
  industry: "$INDUSTRY"
  
customizations:
  created: "$TIMESTAMP"
  script_version: "1.0"
EOF

echo -e "${GREEN}✓ Team configuration created${NC}"

# Technology stack customization
echo -e "\n${YELLOW}Which technologies does your team primarily use?${NC}"

TECHNOLOGIES=""
for tech in "Node.js" "Python" "PHP" "Java" "Angular" "React" "Vue" "Docker" "Kubernetes"; do
    if prompt_yes_no "Do you use $tech?"; then
        if [ -z "$TECHNOLOGIES" ]; then
            TECHNOLOGIES="$tech"
        else
            TECHNOLOGIES="$TECHNOLOGIES,$tech"
        fi
    fi
done

# Save technology preferences
cat >> "$CONFIG_DIR/team-config.yaml" << EOF

technologies:
EOF

# Convert comma-separated to list
if [ -n "$TECHNOLOGIES" ]; then
    echo "$TECHNOLOGIES" | tr ',' '\n' | while IFS= read -r tech; do
        echo "  - $tech" >> "$CONFIG_DIR/team-config.yaml"
    done
fi

# Coding standards customization
echo -e "\n${YELLOW}Let's customize your coding standards:${NC}"

# Indentation
INDENT_STYLE=$(prompt_choice "Preferred indentation style?" "2 spaces" "4 spaces" "Tabs")

# Line length
printf "Maximum line length (default 80, enter for default): "
read MAX_LINE_LENGTH
MAX_LINE_LENGTH=${MAX_LINE_LENGTH:-80}

# Naming conventions
NAMING_CONVENTION=$(prompt_choice "Variable naming convention?" "camelCase" "snake_case" "PascalCase" "kebab-case")

# Testing preferences
echo -e "\n${YELLOW}Testing preferences:${NC}"

TEST_FRAMEWORK=$(prompt_choice "Preferred testing approach?" "TDD (Test-Driven Development)" "BDD (Behavior-Driven Development)" "Traditional (tests after code)" "Minimal testing")

printf "Minimum code coverage requirement (%, enter for 80): "
read CODE_COVERAGE
CODE_COVERAGE=${CODE_COVERAGE:-80}

# Update test configuration
cat >> "$CONFIG_DIR/team-config.yaml" << EOF

testing:
  approach: "$TEST_FRAMEWORK"
  minimum_coverage: $CODE_COVERAGE
  
code_style:
  indentation: "$INDENT_STYLE"
  max_line_length: $MAX_LINE_LENGTH
  naming_convention: "$NAMING_CONVENTION"
EOF

# Workflow customizations
echo -e "\n${YELLOW}Workflow preferences:${NC}"

if prompt_yes_no "Do you use Git Flow branching?"; then
    BRANCHING="gitflow"
else
    BRANCHING=$(prompt_choice "Branch naming convention?" "feature/TASK-ID" "TASK-ID" "feature/description" "custom")
fi

PR_REVIEWS=$(prompt_choice "Pull request review requirements?" "No reviews needed" "1 reviewer" "2 reviewers" "Team lead approval")

# Create workflow configuration
cat > "$CONFIG_DIR/workflow-config.yaml" << EOF
# Workflow Configuration
# Generated by customization script on $TIMESTAMP

branching:
  strategy: "$BRANCHING"
  
pull_requests:
  reviews_required: "$PR_REVIEWS"
  
deployment:
  environments: ["development", "staging", "production"]
EOF

# Summary report
echo -e "\n${BLUE}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║                 Customization Summary                  ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════╝${NC}"
echo
echo -e "${GREEN}✓ Team configuration created${NC}"
echo -e "${GREEN}✓ Technology stack configured${NC}"
echo -e "${GREEN}✓ Coding standards customized${NC}"
echo -e "${GREEN}✓ Testing preferences set${NC}"
echo -e "${GREEN}✓ Workflow configuration created${NC}"
echo
echo -e "Configuration files created in: ${BLUE}$CONFIG_DIR/${NC}"
echo
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Review the customizations in the configuration files"
echo "2. Commit these changes to your repository"
echo "3. Share with your team for feedback"
echo
echo -e "${GREEN}Customization complete!${NC}"

# Create a summary file
cat > "$CONFIG_DIR/customization-summary.md" << EOF
# Customization Summary for $TEAM_NAME

Generated on: $TIMESTAMP

## Team Profile
- **Team Size**: $TEAM_SIZE
- **Project Type**: $PROJECT_TYPE
- **Industry**: $INDUSTRY

## Technologies
$(echo "$TECHNOLOGIES" | tr ',' '\n' | sed 's/^/- /' | sed '/^- $/d')

## Coding Standards
- **Indentation**: $INDENT_STYLE
- **Max Line Length**: $MAX_LINE_LENGTH
- **Naming Convention**: $NAMING_CONVENTION

## Testing
- **Approach**: $TEST_FRAMEWORK
- **Minimum Coverage**: $CODE_COVERAGE%

## Workflow
- **Branching Strategy**: $BRANCHING
- **PR Reviews**: $PR_REVIEWS

## Next Steps
1. Review all customizations
2. Test with your team
3. Iterate as needed
EOF

echo
echo -e "${BLUE}╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║                    Setup Development Environment         ║${NC}"
echo -e "${BLUE}╚══════════════════════════════════════════════════════════╝${NC}"
echo
echo -e "${YELLOW}Would you like to run the development environment setup now?${NC}"
echo
echo -e "${GREEN}Why run setup-dev-env.sh?${NC}"
echo "• Automatically installs only the technologies you selected"
echo "• Configures development tools (linters, formatters, etc.)"
echo "• Sets up project structure and Git hooks"
echo "• Creates VS Code settings optimized for your tech stack"
echo "• Generates README.md with your specific technologies"
echo "• Saves time by avoiding manual installation of each tool"
echo
printf "Run setup-dev-env.sh now? (y/n): "
read -r SETUP_RESPONSE

if [ "$SETUP_RESPONSE" = "y" ] || [ "$SETUP_RESPONSE" = "Y" ]; then
    echo
    echo -e "${GREEN}Running development environment setup...${NC}"
    echo
    if [ -f "./scripts/setup-dev-env.sh" ]; then
        chmod +x "./scripts/setup-dev-env.sh"
        ./scripts/setup-dev-env.sh
    else
        echo -e "${RED}Error: setup-dev-env.sh not found in ./scripts/${NC}"
        echo "Please run it manually when available."
    fi
else
    echo
    echo -e "${YELLOW}You can run the setup later with:${NC}"
    echo "./scripts/setup-dev-env.sh"
    echo
    echo -e "${GREEN}This will install and configure only the technologies you selected.${NC}"
fi

echo -e "\nSummary saved to: ${BLUE}$CONFIG_DIR/customization-summary.md${NC}"
